#!/usr/bin/env python
import sys
import json
from Tkinter import *
from PIL import ImageTk 

def main():
  root = Tk()
  if sys.platform.startswith('linux'):
    root.attributes('-type', 'utility')
  app = App(master=root)
  app.mainloop()

class App(Frame):
  def __init__(self, master=None):
    Frame.__init__(self, master)
    self.pack()
    self.spaces = {}
    self.load_spaces()
    self.image = ImageTk.PhotoImage(file='resources/gameboard.png')
    self.create_widgets()

  def create_widgets(self):
    self.controlgroup = Frame(self)
    self.controlgroup.pack()
    self.canvas = GameCanvas(self.controlgroup, self.oncanvasclick, self.image, self.spaces)
    self.canvas.paint()
    self.canvas.grid(row=0, column=0)
    self.space_selector = Listbox(self.controlgroup)
    for space in sorted(self.spaces.keys()):
      self.space_selector.insert(END, space)
    self.space_selector.grid(row=0, column=1, sticky=N+S)

  def get_selected_space(self):
    selection = self.space_selector.curselection()
    if len(selection) == 0:
      return None
    else:
      return sorted(self.spaces.keys())[selection[0]]

  def oncanvasclick(self, evt):
    selected_space = self.get_selected_space()
    if not selected_space:
      return
    self.spaces[selected_space] = (evt.x, evt.y)
    self.canvas.paint()
    self.dump_spaces()

  def dump_spaces(self):
    file = open('resources/standard.json', 'w')
    json.dump(self.spaces, file)
    file.close()

  def load_spaces(self):
    file = open('resources/standard.json', 'r')
    self.spaces = json.load(file)
    file.close()

class GameCanvas(Canvas):
  def __init__(self, master=None, onclick=None, image=None, spaces=None):
    Canvas.__init__(self, master, width=image.width(), height=image.height())
    self.bind("<Button-1>", onclick)
    self.gameimage = image
    self.spaces = spaces
    
  def paint(self):
    self.create_image(0, 0, anchor=NW, image=self.gameimage)
    for space in self.spaces:
      self.create_text(self.spaces[space], text=space, fill='red', anchor=NW)
    

if __name__ == "__main__":
  main()
